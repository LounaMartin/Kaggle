# -*- coding: utf-8 -*-
"""gender_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkY6WEQG9xDc--UhmKqlMZSJeVyEkL6-
"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets download jessicali9530/celeba-dataset
! unzip celeba-dataset.zip

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import random
import cv2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, Sequential
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications.efficientnet_v2 import EfficientNetV2B0
from sklearn.metrics import confusion_matrix, accuracy_score
from tensorflow.keras.callbacks import EarlyStopping

root_directory = "/content/"
img_directory = "img_align_celeba/img_align_celeba/"
df = pd.read_csv(root_directory+"list_attr_celeba.csv")
df.head()

"""For now, we'll only predict the gender of a person based on an image."""

df = df[["image_id","Male"]]
df.replace(to_replace=[-1,1],value=["Female","Male"],inplace=True)
df.rename(columns={"Male":"gender"},inplace=True)
df.head()

"""We visualise the data distribution"""

classes,counts=np.unique(df["gender"],return_counts=True)

plt.figure(figsize=(10,6))
plt.bar(classes,counts,color="#D196D0")
plt.title("Distribution of gender in the dataset")
plt.show()

"""We prepare a training and testing set."""

df_train, df_test = train_test_split(df,test_size=0.1)
print(df_train.shape)
print(df_test.shape)

"""We generate augmented images for the training set."""

img_size = (128,128)
batch_size = 128
train_datagen = ImageDataGenerator(horizontal_flip=True,
                                  vertical_flip=True,
                                  rotation_range=180,
                                  shear_range=10,
                                  zoom_range=0.2,
                                  validation_split=0.2)

test_datagen = ImageDataGenerator()

train_generator = train_datagen.flow_from_dataframe(directory=root_directory+img_directory,
                                                   dataframe=df_train,
                                                   x_col="image_id",
                                                   y_col="gender",
                                                   subset="training",
                                                   batch_size=batch_size,
                                                   target_size=img_size,
                                                   shuffle=True,
                                                   class_mode="binary")

val_generator = train_datagen.flow_from_dataframe(directory=root_directory+img_directory,
                                                   dataframe=df_train,
                                                   x_col="image_id",
                                                   y_col="gender",
                                                   subset="validation",
                                                   batch_size=batch_size,
                                                   target_size=img_size,
                                                   shuffle=True,
                                                   class_mode="binary")

test_generator = test_datagen.flow_from_dataframe(directory=root_directory+img_directory,
                                                   dataframe=df_test,
                                                   x_col="image_id",
                                                   y_col="gender",
                                                   batch_size=batch_size,
                                                   target_size=img_size,
                                                   shuffle=False,
                                                   class_mode="binary")

"""We display some images"""

batch_data, batch_labels = train_generator.next()

n_rows = 2
n_cols = 3

fig, axes = plt.subplots(n_rows, n_cols, figsize=(6, 6))

for i in range(n_rows):
    for j in range(n_cols):
        r = random.randint(0, len(batch_labels) - 1)

        axes[i, j].imshow(batch_data[r]/255)
        axes[i, j].set_title(classes[batch_labels.astype(int)[r]])
        axes[i, j].axis('off')

plt.tight_layout()
plt.show()

"""We create the model."""

img_shape = img_size + tuple([3])
efficient_net = EfficientNetV2B0(
    weights='imagenet',
    input_shape=img_shape,
    include_top=False,
    pooling='max')

model = Sequential()
model.add(efficient_net)
model.add(layers.Dense(512,activation="relu"))
model.add(layers.Dense(1, activation="sigmoid"))
model.summary()

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

nb_epochs = 1
history = model.fit(
    train_generator,
    steps_per_epoch = train_generator.samples // batch_size,
    validation_data = val_generator,
    validation_steps = val_generator.samples // batch_size,
    epochs = nb_epochs)

"""We evaluate the model on the testing set"""

model.evaluate(test_generator)

"""We display the true values against the predictions"""

preds_raw = model.predict(test_generator)

preds = []
for pred in preds_raw:
  if pred > 0.5:
    preds.append(1)
  else:
    preds.append(0)

cm = confusion_matrix(test_generator.classes,preds)

sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=classes, yticklabels=classes)

plt.xlabel('Predicted')
plt.xticks(rotation=45)
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

"""We save the model"""

from google.colab import drive
model.save("gender_classification_v0")
drive.mount('/content/drive')
!cp -r "gender_classification_v0" "/content/drive/MyDrive/"